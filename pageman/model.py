# model.py
import collections
import pymongo
from datetime import datetime

class EntriesManager:
    """Manage entries.

    The structure of an entry:
    {
      '_id': 'optinal field that automatically generated by MongoDB',
      'title': 'Title of an entry',
      'content': 'Markdown content',
      'date': 'last edit time' # optinal
    }
    """

    COLLECTION_NAME = 'entries'

    def __init__(self, mongodb_url=None, db_name='pageman_entries'):
        """init

        Initial an connection to Mongo DB.
        """
        self._client = None
        if mongodb_url is None:
            self._client = pymongo.MongoClient()
        else:
            self._client = pymongo.MongoClient(mongodb_url)
        assert self._client is not None
        self._db = self._client[db_name]

    def save_entry(self, data):
        """Save an entry

        Insert or update entry.
        If data is inserted (has _id), this method will update
        id of the data automatically.
        Auto update date field data.

        examples:
          # use dict
          manager.save_entry({'title': 'An title', 'content': 'Some content'})
          # or use Entry
          entry = Entry({'title': 'An title', 'content': 'Some content'})
          manager.save_entry(entry)

        data -> Entry or dict
        """
        if isinstance(data, dict):
            data = Entry(data)
        data.set_date(datetime.now())
        # TODO check fields of the data
        self._db[self.COLLECTION_NAME].save(data)

    def delete_entry(self, data_or_id):
        """Delete an entry

        If id not exists, this method will throws ValueError.

        data_or_id -> Entry, dict or string contains id
        """
        id_of_data = None
        if isinstance(data_or_id, str):
            id_of_data = data_or_id
        else:
            id_of_data = data_or_id['_id']
        self._db[self.COLLECTION_NAME].delete_one({'_id': id_of_data})

    def get_entries(self, _from=None, to=None):
        """Get entries

        _from -> int
        to -> int
        """
        skip = 0 if _from is None else _from
        limit = 0 if to is None else to - skip
        return self._db[self.COLLECTION_NAME].find(skip=skip, limit=limit)


class Entry(collections.MutableMapping):
    """Represent an entry
    """
    FIELD_ID = '_id'
    FIELD_TITLE = 'title'
    FIELD_CONTENT = 'content'
    FIELD_DATE = 'date'

    def __init__(self, data=None):
        '''Init

        data -> dict or None
        '''
        self._data = None
        if data is not None and not isinstance(data, dict):
            raise ValueError('data is not an instance of dict')
        if data is None:
            self._data = self._generate_empty_data()
        else:
            # TODO check fields of the data
            self._data = data
        assert isinstance(self._data, dict)

    def set_title(self, title):
        self._data[self.FIELD_TITLE] = title

    def get_title(self):
        return self._data[self.FIELD_TITLE]

    def set_content(self, content):
        self._data[self.FIELD_CONTENT] = content

    def get_content(self):
        return self._data[self.FIELD_CONTENT]

    def set_date(self, date):
        self._data[self.FIELD_DATE] = date

    def get_date(self):
        return self._data[self.FIELD_DATE]

    def get(self, name, default=None):
        return self._data.get(name, default)

    def _generate_empty_data(self):
        return {self.FIELD_TITLE: None,
                self.FIELD_CONTENT: None,
                self.FIELD_DATE: None}

    def __getitem__(self, key):
        return self._data.__getitem__(key)

    def __setitem__(self, key, value):
        return self._data.__setitem__(key, value)

    def __delitem__(self, key):
        return self._data.__delitem__(key)
    
    def __iter__(self):
        return self._data.__iter__()

    def __len__(self):
        return self._data.__len__()
    

if __name__ == '__main__':
    em1 = EntriesManager()
    entries = []
    for i in range(1, 11):
        entry = Entry()
        entry.set_title('Hello {}'.format(i))
        entry.set_content('World {}'.format(i))
        entries.append(entry)
